/* Solution security policy of the "mqtt subscriber" example. */

/* Assigning the execute interface. */
execute: kl.core.Execute

use nk.base._

/* Including EDL files. */
use EDL Einit
use EDL kl.core.Core
use EDL kl.drivers.RAMDisk
use EDL kl.VfsRamFs
use EDL kl.VfsSdCardFs
use EDL kl.VfsNet
use EDL kl.rump.Dhcpcd
use EDL kl.Ntpd

/* Platform-specific EDL descriptions. */
use EDL kl.drivers.SDCard
use EDL kl.drivers.BSP
use EDL kl.drivers.GPIO

/* EDL descriptions of external (not provided in the SDK) programs. */
use EDL mosquitto.Subscriber

/* Allows all tasks to return errors. */
error {
    grant ()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.drivers.BSP class.
 */
execute src = Einit, dst = kl.drivers.BSP
{
    grant()
}

/**
 * Allows the tasks with the kl.drivers.BSP class
 * to send requests to the KasperskyOS kernel and get responses.
 * This enables the BSP program to use core endpoints.
 */
request src = kl.drivers.BSP, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.BSP
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.drivers.GPIO class.
 */
execute src = Einit, dst = kl.drivers.GPIO
{
    grant()
}

/**
 * Allows the tasks with the kl.drivers.GPIO class
 * to send requests to the KasperskyOS kernel and get responses.
 * This enables the GPIO driver to use core endpoints.
 */
request src = kl.drivers.GPIO, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.GPIO
{
    grant()
}

/**
 * Allows the KasperskyOS kernel to start itself and tasks with the Einit class.
 */
execute src = kl.core.Core, dst = kl.core.Core
{
    grant()
}

execute src = kl.core.Core, dst = Einit
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.drivers.RAMDisk class.
 */
execute src = Einit, dst = kl.drivers.RAMDisk
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.drivers.SDCard class.
 */
execute src = Einit, dst = kl.drivers.SDCard
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.VfsRamFs class.
 */
execute src = Einit, dst = kl.VfsRamFs
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.VfsSdCardFs class.
 */
execute src = Einit, dst = kl.VfsSdCardFs
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.VfsNet class.
 */
execute src = Einit, dst = kl.VfsNet
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.rump.Dhcpcd class.
 */
execute src = Einit, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.Ntpd class.
 */
execute src = Einit, dst = kl.Ntpd
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the mosquitto.Subscriber class.
 */
execute src = Einit, dst = mosquitto.Subscriber
{
    grant()
}

/**
 * Allows the tasks with the Einit class to send requests to the KasperskyOS kernel and get
 * responses. This enables the Einit program to use core endpoints.
 */
request src = Einit, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = Einit
{
    grant()
}

/**
 * Allows the tasks with the kl.rump.Dhcpcd class to send requests to the KasperskyOS kernel and get
 * responses. This enables the Dhcpcd program to use core endpoints.
 */
request src = kl.rump.Dhcpcd, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * Allows the tasks with the kl.Ntpd class to send requests to the KasperskyOS kernel and get
 * responses. This enables the Ntpd program to use core endpoints.
 */
request src = kl.Ntpd, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.Ntpd
{
    grant()
}

/**
 * Allows the tasks with the kl.drivers.RAMDisk class to send requests to the KasperskyOS kernel and get
 * responses. This enables the RAMDisk driver to use core endpoints.
 */
request src = kl.drivers.RAMDisk, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.RAMDisk
{
    grant()
}

/**
 * Allows the tasks with the kl.VfsNet class to send requests to the KasperskyOS kernel and get
 * responses. This enables the VfsNet program to use core endpoints.
 */
request src = kl.VfsNet, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.VfsNet
{
    grant()
}

/**
 * Allows the tasks with the kl.VfsRamFs class to send requests to the KasperskyOS kernel and get
 * responses. This enables the VfsRamFs program to use core endpoints.
 */
request src = kl.VfsRamFs, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.VfsRamFs
{
    grant()
}

/**
 * Allows the tasks with the kl.VfsSdCardFs class to send requests to the KasperskyOS kernel and get
 * responses. This enables the VfsSdCardFs program to use core endpoints.
 */
request src = kl.VfsSdCardFs, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.VfsSdCardFs
{
    grant()
}

/**
 * Allows the tasks with the mosquitto.Subscriber class to send requests to the KasperskyOS kernel and get
 * responses. This enables the Subscriber program to use core endpoints.
 */
request src = mosquitto.Subscriber, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = mosquitto.Subscriber
{
    grant()
}

/**
 * Allows the tasks with the mosquitto.Subscriber class to send requests
 * to tasks with the kl.VfsSdCardFs class and get responses.
 * This enables the Subscriber program to communicate with the VfsSdCardFs program.
 */
request src = mosquitto.Subscriber, dst = kl.VfsSdCardFs
{
    grant()
}

response src = kl.VfsSdCardFs, dst = mosquitto.Subscriber
{
    grant()
}

/**
 * Allows the tasks with the mosquitto.Subscriber class to send requests
 * to tasks with the kl.VfsRamFs class and get responses.
 * This enables the Subscriber program to communicate with the VfsRamFs program.
 */
request src = mosquitto.Subscriber, dst = kl.VfsRamFs
{
    grant()
}

response src = kl.VfsRamFs, dst = mosquitto.Subscriber
{
    grant()
}

/**
 * Allows the tasks with the kl.rump.Dhcpcd class to send requests
 * to tasks with the kl.VfsRamFs class and get responses.
 * This enables the Dhcpcd program to communicate with the VfsRamFs program.
 */
request src = kl.rump.Dhcpcd, dst = kl.VfsRamFs
{
    grant()
}

response src = kl.VfsRamFs, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * Allows the tasks with the kl.VfsSdCardFs class to send requests
 * to tasks with the kl.drivers.SDCard class and get responses.
 * This enables the VfsSdCardFs program to communicate with the SDCard driver.
 */
request src = kl.VfsSdCardFs, dst = kl.drivers.SDCard
{
    grant()
}

response src = kl.drivers.SDCard, dst = kl.VfsSdCardFs
{
    grant()
}

/**
 * Allows the tasks with the kl.VfsRamFs class to send requests
 * to tasks with the kl.drivers.RAMDisk class and get responses.
 * This enables the VfsRamFs program to communicate with the RAMDisk driver.
 */
request src = kl.VfsRamFs, dst = kl.drivers.RAMDisk
{
    grant()
}

response src = kl.drivers.RAMDisk, dst = kl.VfsRamFs
{
    grant()
}

/**
 * Allows the tasks with the mosquitto.Subscriber class to send requests
 * to tasks with the kl.VfsNet class and get responses.
 * This enables the Subscriber program to communicate with the VfsNet program.
 */
request src = mosquitto.Subscriber, dst = kl.VfsNet
{
    grant()
}

response src = kl.VfsNet, dst = mosquitto.Subscriber
{
    grant()
}

/**
 * Allows the tasks with the kl.rump.Dhcpcd class to send requests
 * to tasks with the kl.VfsNet class and get responses.
 * This enables the Dhcpcd program to communicate with the VfsNet program.
 */
request src = kl.rump.Dhcpcd, dst = kl.VfsNet
{
    grant()
}

response src = kl.VfsNet, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * Allows the tasks with the kl.drivers.SDCard class
 * to send requests to the KasperskyOS kernel and get responses.
 * This enables the SDCard driver to use core endpoints.
 */
request src = kl.drivers.SDCard, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.SDCard
{
    grant()
}

/**
 * Allows the SDCard driver to interact with Kaspersky Security Module
 * via the security interface.
 * This enables the SDCard driver to register new ports.
 */
security src = kl.drivers.SDCard, method = Register
{
    grant ()
}

/**
 * Allows the RAMDisk driver to interact with Kaspersky Security Module
 * via the security interface.
 */
security src = kl.drivers.RAMDisk, method = Register
{
    grant ()
}

/**
 * Allows the tasks with the kl.rump.Dhcpcd class send requests
 * to tasks with the kl.VfsSdCardFs class and get responses.
 * This enables the Dhcpcd program to communicate with the VfsSdCardFs program.
 */
request src = kl.rump.Dhcpcd, dst = kl.VfsSdCardFs
{
    grant()
}

response src = kl.VfsSdCardFs, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * Allows the tasks with the kl.Ntpd class send requests
 * to tasks with the kl.VfsRamFs class and get responses.
 * This enables the Ntpd program to communicate with the VfsRamFs program.
 */
request src = kl.Ntpd, dst = kl.VfsRamFs
{
    grant()
}

response src = kl.VfsRamFs, dst = kl.Ntpd
{
    grant()
}

/**
 * Allows the tasks with the  kl.Ntpd class send requests
 * to tasks with the kl.VfsNet class and get responses.
 * This enables the Ntpd program to communicate with the VfsNet program.
 */
request src = kl.Ntpd, dst = kl.VfsNet
{
    grant()
}

response src = kl.VfsNet, dst = kl.Ntpd
{
    grant()
}

/**
 * Allows the tasks with the kl.Ntpd class send requests
 * to tasks with the kl.VfsSdCardFs class and get responses.
 * This enables the Ntpd program to communicate with the VfsSdCardFs program.
 */
request src = kl.Ntpd, dst = kl.VfsSdCardFs
{
    grant()
}

response src = kl.VfsSdCardFs, dst = kl.Ntpd
{
    grant()
}
